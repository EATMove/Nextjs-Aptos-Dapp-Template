name: PR Review and TestingAdd commentMore actions

on:
  pull_request:
    branches: [main, master]
    types: [opened, synchronize, reopened]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run tests
        run: npm test

      - name: 🔍 Run publish checks
        run: npm run publish-check

      - name: 📋 Test package generation
        run: |
          # Test that the generator script exists and is executable
          node bin/generate.js --help

          # Test that the template directory exists and has required files
          test -d template
          test -f template/package.json
          test -f template/README.md
          test -f template/env.example

          echo "✅ Package generation tests passed"

  version-preview:
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 📈 Preview version bump
        id: preview
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          
          # Determine version type based on commit messages
          if git log --oneline origin/main..HEAD | grep -i "breaking\|major"; then
            VERSION_TYPE="major"
          elif git log --oneline origin/main..HEAD | grep -i "feat\|feature\|minor"; then
            VERSION_TYPE="minor"
          else
            VERSION_TYPE="patch"
          fi
          
          # Calculate new version
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          case $VERSION_TYPE in
            major)
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
              ;;
            patch)
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              ;;
          esac
          
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT

      - name: 📋 Display version preview
        run: |
          echo "## 📦 Version Preview"
          echo ""
          echo "🏷️ **Current Version**: v${{ steps.preview.outputs.current_version }}"
          echo "🚀 **Next Version**: v${{ steps.preview.outputs.new_version }}"
          echo "📈 **Bump Type**: ${{ steps.preview.outputs.version_type }}"
          echo ""
          echo "### 🔍 What will happen when this PR is merged:"
          echo "1. ✅ Tests will run"
          echo "2. 📈 Version will be bumped to v${{ steps.preview.outputs.new_version }}"
          echo "3. 📦 Package will be published to NPM"
          echo "4. 🏷️ GitHub release will be created"
          echo ""
          echo "### 🚀 Users will be able to use:"
          echo "npx create-nextjs-aptos-dapp-template"

  security-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🛡️ Run security audit
        run: npm audit --audit-level=moderate

      - name: 🔍 Check for sensitive files
        run: |
          # Check if any sensitive files are accidentally included
          if find . -name "*.env" -not -path "./template/*" | grep -q .; then
            echo "❌ Found .env files in root directory"
            exit 1
          fi
          
          if find . -name "*.key" -o -name "*.pem" | grep -q .; then
            echo "❌ Found potential private key files"
            exit 1
          fi
          
          echo "✅ No sensitive files found"
