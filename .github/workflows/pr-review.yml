name: PR Review and Testing

on:
  pull_request:
    branches: [main, master]
    types: [opened, synchronize, reopened]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run tests
        run: npm test

      - name: 🔍 Run publish checks
        run: npm run publish-check

      - name: 📋 Test package generation
        run: |
          # Test that the generator script exists and is executable
          node bin/generate.js --help

          # Test that the template directory exists and has required files
          test -d template
          test -f template/package.json
          test -f template/README.md
          test -f template/env.example

          echo "✅ Package generation tests passed"

  version-preview:
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 📈 Preview version bump
        id: preview
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          
          # Determine version type based on commit messages
          if git log --oneline origin/main..HEAD | grep -i "breaking\|major"; then
            VERSION_TYPE="major"
          elif git log --oneline origin/main..HEAD | grep -i "feat\|feature\|minor"; then
            VERSION_TYPE="minor"
          else
            VERSION_TYPE="patch"
          fi
          
          # Calculate new version
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          case $VERSION_TYPE in
            major)
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
              ;;
            patch)
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              ;;
          esac
          
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT

      - name: 💬 Comment version preview
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('📦 Version Preview')
            );
            
            const commentBody = `## 📦 Version Preview
            
            🏷️ **Current Version**: \`v${{ steps.preview.outputs.current_version }}\`
            🚀 **Next Version**: \`v${{ steps.preview.outputs.new_version }}\`
            📈 **Bump Type**: \`${{ steps.preview.outputs.version_type }}\`
            
            ### 🔍 What will happen when this PR is merged:
            1. ✅ Tests will run
            2. 📈 Version will be bumped to \`v${{ steps.preview.outputs.new_version }}\`
            3. 📦 Package will be published to NPM
            4. 🏷️ GitHub release will be created
            5. 💬 Success comment will be posted
            
            ### 🚀 Users will be able to use:
            \`\`\`bash
            npx create-nextjs-aptos-dapp-template
            \`\`\`
            
            ---
            *This preview is automatically updated when you push new commits.*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

  security-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🛡️ Run security audit
        run: npm audit --audit-level=moderate

      - name: 🔍 Check for sensitive files
        run: |
          # Check if any sensitive files are accidentally included
          if find . -name "*.env" -not -path "./template/*" | grep -q .; then
            echo "❌ Found .env files in root directory"
            exit 1
          fi
          
          if find . -name "*.key" -o -name "*.pem" | grep -q .; then
            echo "❌ Found potential private key files"
            exit 1
          fi
          
          echo "✅ No sensitive files found"

  contributor-welcome:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    
    steps:
      - name: 🎉 Welcome new contributor
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            
            const { data: user } = await github.rest.users.getByUsername({
              username: pullRequest.user.login,
            });
            
            const { data: commits } = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              author: pullRequest.user.login,
            });
            
            const isFirstTimeContributor = commits.length <= 3;
            
            if (isFirstTimeContributor) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `## 🎉 Welcome to the project, @${pullRequest.user.login}!
                
                Thank you for your contribution to the Next.js Aptos/Movement dApp template! 
                
                ### 📋 What happens next:
                1. 🤖 Automated tests will run on your PR
                2. 👀 A maintainer will review your changes
                3. ✅ Once approved and merged, your changes will be automatically published to NPM
                4. 🚀 Users worldwide will benefit from your contribution!
                
                ### 🔍 Current status:
                - ⏳ Tests are running...
                - 📦 Version preview will be posted shortly
                - 🛡️ Security checks in progress
                
                ### 💡 Tips:
                - Make sure your changes don't break existing functionality
                - Add tests if you're introducing new features
                - Update documentation if needed
                
                Thanks again for contributing! 🙏`
              });
            }
